# Shader routines

These functions are declared in the main Allegro header file:

    #include <allegro5/allegro.h>

## API: ALLEGRO_SHADER

Represents a shader object. It can be either a vertex or a pixel shader. The
shader source for the underlying shader can be provided either as GLSL, HLSL
or Cg.

Since: 5.1.0

## API: ALLEGRO_SHADER_TYPE

Used with [al_attach_shader_source] to specify which kind of shader should be
attached.

ALLEGRO_VERTEX_SHADER
:   A vertex shader is executed for each vertex it is
    used with. The program will output exactly one vertex at a time.
   
    When Allegro's graphics are being used then in addition to all vertices of
    primitives from the primitives addon, each drawn bitmap also consists of
    four vertices.

ALLEGRO_PIXEL_SHADER
:   A pixel shader is executed for each pixel it is used
    with. The program will output exactly one pixel at a time - either in the
    backbuffer or in the current target bitmap.
   
    With Allegro's builtin graphics this means the shader is for example called
    for each destination pixel of the output of an [al_draw_bitmap] call.
   
    A more accurate term for pixel shader would be fragment shader since one
    final pixel in the target bitmap is not necessarily composed of only a
    single output but of multiple fragments (for example when multi-sampling is
    being used).

Since: 5.1.0

## API: ALLEGRO_SHADER_PLATFORM

Used with [al_create_shader] to select the type of shader.

* ALLEGRO_SHADER_AUTO
* ALLEGRO_SHADER_GLSL
* ALLEGRO_SHADER_HLSL

Since: 5.1.0

## API: al_create_shader

Specify one of the [ALLEGRO_SHADER_PLATFORM] values to create a new shader
object. The ALLEGRO_SHADER_AUTO value means GLSL is used if OpenGL is being
used otherwise HLSL. ALLEGRO_SHADER_AUTO requires that
there is a current display set on the calling thread.

Since: 5.1.0

## API: al_attach_shader_source

Attaches the shader's source code to the shader object and compiles it. Passing
NULL deletes the underlying (OpenGL or DirectX) shader.

When using the ALLEGRO_USE_PROGRAMMABLE_PIPELINE flag with
[al_set_new_display_flags] Allegro itself will use shaders for all its
graphics operations. No default shaders are provided so for anything to be
drawn you have to setup at least one pair of shaders.

If you do not use ALLEGRO_USE_PROGRAMMABLE_PIPELINE Allegro's graphics functions
will not use any shader specific functions themselves. In case of a system
with no fixed function pipeline (like OpenGL ES 2 or OpenGL 3 or 4) this means
Allegro's drawing functions cannot be used.

TODO: Is ALLEGRO_USE_PROGRAMMABLE_PIPELINE set automatically in this case?

When ALLEGRO_USE_PROGRAMMABLE_PIPELINE is used the following shader variables
are provided by Allegro and can be accessed in your shaders:

* al_projview_matrix - matrix for Allegro's orthographic projection multiplied
                     by the [al_use_transform] matrix (vertex shader)

* al_pos - vertex position attribute (vertex shader)

* al_color - vertex color attribute (vertex shader, passed to fragment shader)

* al_texcoord - vertex texture coordinate (vertex shader, passed to fragment shader)

* al_use_tex - whether or not to use the bound texture (fragment shader)

* al_tex - the sampler2D for the texture if one is bound (fragment shader)

* al_use_tex_matrix - whether or not to use a texture matrix (fragment shader)

* al_tex_matrix - the texture matrix (fragment shader, used by the primitives addon)

Also, each shader variable has a corresponding macro name that can be used in C.

* ALLEGRO_SHADER_VAR_PROJVIEW_MATRIX for al_projview_matrix
* ALLEGRO_SHADER_VAR_POS for al_pos
* ALLEGRO_SHADER_VAR_COLOR for al_color
* ALLEGRO_SHADER_VAR_TEXCOORD for al_texcoord
* ALLEGRO_SHADER_VAR_USE_TEX for al_use_tex
* ALLEGRO_SHADER_VAR_TEX for al_tex
* ALLEGRO_SHADER_VAR_USE_TEX_MATRIX for al_use_tex_matrix
* ALLEGRO_SHADER_VAR_TEX_MATRIX for al_tex_matrix

Returns true on access and false on error, in which case the error log is
updated. The error log can be retrieved with [al_get_shader_log].

Since: 5.1.0

## API: al_attach_shader_source_file

Like [al_attach_shader_source] but reads the source code for the shader from
the named file.

Since: 5.1.0

## API: al_link_shader

This is reqired before the shader can be used with [al_use_shader]. It should
be called after successfully compiling the shader with
[al_attach_shader_source] or [al_attach_shader_source_file].

Returns true on access and false on error, in which case the error log is
updated. The error log can be retrieved with [al_get_shader_log].

Since: 5.1.0

## API: al_get_shader_log

Return a read-only string containing the information log for a shader program.
The log is updated by certain functions, such as [al_attach_shader_source]
or [al_link_shader] when there is an error.

This function never returns NULL.

Since: 5.1.0

## API: al_get_shader_platform

Returns the platform the shader was created with (either
ALLEGRO_SHADER_HLSL or ALLEGRO_SHADER_GLSL).

Since: 5.1.6

## API: al_use_shader

Uses the shader for subsequent drawing operations.

Since: 5.1.0

## API: al_destroy_shader

This destroys the shader object as well as the underlying shader.

Since: 5.1.0

## API: al_set_shader_sampler

Adds a texture sampler variable for the given bitmap and texture unit to the
shader.

Since: 5.1.0

## API: al_set_shader_matrix

Adds a matrix variable to the shader.

Since: 5.1.0

## API: al_set_shader_int

Adds an integer variable to the shader.

Since: 5.1.0

## API: al_set_shader_float

Adds a float variable to the shader.

Since: 5.1.0

## API: al_set_shader_int_vector

Adds an array of integer vectors to the shader. The 'elem_size' parameter can
take one of the values 1, 2, 3 or 4. If it is 1 then an array of 'num_elems'
integer values is added. Otherwise each added array element is assumed to be a
vector with 2, 3 or 4 elements in it.

Since: 5.1.0

## API: al_set_shader_float_vector

Same as [al_set_shader_int_vector] except all values are float instead of int.

Since: 5.1.0

## API: al_set_shader_vertex_array

Sets a vertex attribute.

FIXME: Right now each array element is a 3-component vector.

Since: 5.1.0

## API: al_set_shader_color_array

Sets a vertex attribute.

FIXME: Right now each array element is a 4-component vector.

Since: 5.1.0

## API: al_set_shader_texcoord_array

Sets a vertex attribute.

FIXME: Right now each array element is a 2-component vector.

Since: 5.1.0

## API: al_set_shader

Sets the given display to use the given shader. Should be called after
[al_link_shader], but before actually drawing using the shader.

FIXME: Maybe this is not even needed as we have al_use_shader?

Since: 5.1.0

## API: al_get_default_glsl_vertex_shader

Returns a string containing the GLSL source code to Allegro's default vertex
shader.

Since: 5.1.5

## API: al_get_default_glsl_pixel_shader

Returns a string containing the GLSL source code to Allegro's default fragment
shader (or "pixel shader").

Since: 5.1.5
