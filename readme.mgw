     ______   ___    ___
    /\  _  \ /\_ \  /\_ \
    \ \ \L\ \\//\ \ \//\ \      __     __   _ __   ___ 
     \ \  __ \ \ \ \  \ \ \   /'__`\ /'_ `\/\`'__\/ __`\
      \ \ \/\ \ \_\ \_ \_\ \_/\  __//\ \L\ \ \ \//\ \L\ \
       \ \_\ \_\/\____\/\____\ \____\ \____ \ \_\\ \____/
	\/_/\/_/\/____/\/____/\/____/\/___L\ \/_/ \/___/
				       /\____/
				       \_/__/


   Notes on building the MinGW32/Cygwin version of Allegro.

   Written by Henrik Stokseth.

   See readme.txt for a more general overview.



=======================================
============ MinGW32 notes ============
=======================================

   This is a full MinGW32 port of Allegro. This build doesn't rely
   on the DLL files produced by MSVC but can make them itself.
   I'm proud to say Allegro can now make Win32 programs entirely using
   free professional tools. On that note I'd like to thank Peter for
   making this a reality and for finishing off what I started. Enjoy!

   The screensaver example is built, but you must copy scrsave.scr to your
   windows directory if you want to test it.
   
   If you have GNU Bash and GNU fileutils installed then set the
   environment variable UNIX_TOOLS (set UNIX_TOOLS=1) so that compilation
   will work. This is because GNU make will automatically use sh.exe instead
   of command.com if it finds it somewhere in the path.

   make depend and fixdll.bat requires that you have GNU sed installed.
   You can download GNU sed and other utilities for MinGW32 from:
   http://agnes.dida.physik.uni-essen.de/~janjaap/mingw32/download.html



=====================================================
=== Obtaining and installing the compiler & tools ===
=====================================================

   You have four choices when it comes to installing MinGW32 and Allegro
   on your computer. The section 'Setting up MinGW32 to build Allegro'
   describes how to set up the MinGW32 command line tools which is the
   prefered choice for those who like to work on the command line. The
   section 'Setting up Dev-C++ to build Allegro' describes how to set up the
   MinGW32 command line tools in addition to the Dev-C++ IDE. This is the
   prefered choice for those who like to work in a graphical development
   environment. The section 'Setting up Cygwin to build Allegro' describes
   how to set up your Cygwin compiler to build Allegro. The last section
   'Cross compilation' describes how to set up the MinGW32 command line tools
   to compile Win32 programs from your Linux box. 



=============================================
==== Setting up MinGW32 to build Allegro ====
=============================================

   For the MinGW32 part, you will need to obtain the following 
   distributions from the internet. Please don't unzip/install until step 4.

   1) The MinGW32 compiler, documentation and utilities from
      http://www.mingw.org
      At the time of this writing (Aug. 2000) gcc-2.95.2 is out and one
      should get gcc-2.95.2-msvcrt.exe and mingw32-docs-html.exe.
      Direct links to these files are:

      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95.2/
      gcc-2.95.2-msvcrt.exe
      
      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95.2/
      mingw32-docs-html.exe


   2) Get the latest MinGW32 runtime.
      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/runtime/
      At time of writing this is:

      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/runtime/
      bin-msvcrt-2000-03-27.zip


   3) Get the minimal DirectX 7 SDK for MinGW32. Download it from
      http://sunsite.auc.dk/allegro/wipdll/dx70_mgw.zip


   4) Install the MinGW32 packages from step 1. The default path to install
      to is not a good name, so I recommend c:\mingw32 (the following steps
      assume this is what you used). Then unzip the update from step 2 to the
      same directory, overwrite old files.

   5) Unzip the file from step 3 to c:\mingw32\i386-mingw32msvc
      Note: If you have a newer copy of mingw32 where the
      i386-mingw32msvc directory does not exist, then unzip DirectX
      to c:\mingw32 instead.

   6) You now need to add the mingw32\bin path. The best way to do this is
      to add it to autoexec.bat, if you have another compiler make sure the
      mingw path is before it. This path will be added the next time you
      reboot, if you want to add it now, type:

      path c:\mingw32\bin;%PATH%
      

   Test the installation by typing: gcc -v.
   The answer should be similar to
   Reading specs from C:\MINGW32\BIN\..\lib\gcc-lib\i386-mingw32msvc\2.95.2\specs
   gcc version 2.95.2 19991024 (release)



=============================================
==== Setting up Dev-C++ to build Allegro ====
=============================================

   Some people prefer to use the Dev-C++ distribution to make Allegro
   programs. Dev-C++ is a neat development IDE and includes an updated
   MinGW32 compiler. If you would rather like to use Dev-C++ than the
   command line MinGW32 tools ignore the previous chapter and follow
   these instructions.

   1) Obtain the complete Dev-C++ package from

      http://www.bloodshed.net/devcpp.html

   2) Get the latest MinGW32 runtime.
      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/runtime/
      At time of writing this is:

      ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/runtime/
      bin-msvcrt-2000-03-27.zip

   3) Get the minimal DirectX 7 SDK for MinGW32. Download it from

      http://sunsite.auc.dk/allegro/wipdll/dx70_mgw.zip

   4) Install the package from step 1.

   5) Unzip the package from step 2 to a temporary directory. For instance
      C:\Temp. Then move the contents from C:\Temp\bin to C:\Dev-C++\Bin.
      Also move the files in C:\Temp\i386-mingw32msvc\include to
      C:\Dev-C++\Include and the files in C:\Temp\i386-mingw32msvc\lib to
      C:\Dev-C++\Lib.

   6) Unzip the file from step 3 to C:\Dev-C++

   7) You now need to add the C:\Dev-C++\Bin path. The best way to do this is
      to add it to autoexec.bat, if you have another compiler make sure the
      mingw path is before it. This path will be added the next time you
      reboot, if you want to add it now, type:

      path C:\Dev-C++\Bin;%PATH%
      

   Test the installation by typing: gcc -v.
   The answer should be simmilar to
   Using builtin specs.
   gcc version 2.95.2 19991024 (release)



============================================
==== Setting up Cygwin to build Allegro ====
============================================

   1) Obtain and install a Cygwin compiler. Get setup.exe from
      http://sources.redhat.com/cygwin/
      Start the Cygwin setup program and download these packages:
      bash, binutils, cygwin, diff, fileutils, findutils, gcc, gdb,
      gzip, less, login, make, man, mingw, patch, sed, sh-utils,
      tar, texinfo, textutils, w32api.

   2) put the following text in /etc/profile (c:\cygwin\etc\profile)
      export ALLEGRO_USE_CYGWIN=1
      export MINGDIR=/usr/local
      
   3) Download the DirectX 7.0 SDK from
      http://sunsite.auc.dk/allegro/wipdll/dx70_mgw.zip
      and unzip it to your a temporary directory, for instance C:\Temp.
      Then move the contents of C:\Temp\lib to C:\cygwin\lib\w32api, and
      the contents of C:\Temp\include to c:\cygwin\usr\include\w32api.

   4) Then run './fix.sh mingw32'. This will take a while...

   Test the installation by typing: gcc -v.
   The answer should be similar to
   Reading specs from /usr/lib/gcc-lib/i686-pc-cygwin/2.95.2-5/specs
   gcc version 2.95.2-5 19991024 (cygwin experimental)



=======================================
========== Cross compilation ==========
=======================================

   Brief example of how to set up a MinGW32 cross-compiler system:

   1) Download the prebuilt MinGW32 cross-compiler from:
      http://www.devolution.com/~slouken/SDL/Xmingw32/
      Uncompress this file to /usr/local/
      If you put the cross-compiler elsewhere you will have to edit xmake.sh
      and replace XC_PATH and INSTALL_BASE with the right directory names.

   2) Download the DirectX 7.0 SDK from
      http://sunsite.auc.dk/allegro/wipdll/dx70_mgw.zip
      and unzip it to /usr/local/cross-tools/i386-mingw32msvc/
      Make sure you convert all text files to unix style or cpp will croak.

   3) Then run './fix.sh mingw32 --dtou'. You are now finished with all the preparations.
   
   4) You can now run './xmake.sh' to build the Allegro library and 
      then run './xmake.sh install' as root to install Allegro.
      You can use xmake.sh as you would use make to compile any Allegro stuff.
      To make documentation you can run './xmake.sh docs'



============================================
============ Installing Allegro ============
============================================

   Step-by-step instructions on how to build the MinGW32 version of Allegro.
   This assumes you have unzipped allegro to c:\allegro

   First configure Allegro by entering the following on the commandline:

   cd c:\allegro
   fix.bat mingw32

   To build allegro with the default settings (recommended):

   set MINGDIR=c:\mingw32
   make
   make install

   You have now installed mingw32 and allegro! See the rest of the
   documentation and examples to learn more about it. A simple example
   of a command line to compile an allegro program with mingw:

   gcc foo.c -mwindows -O2 -Wall -o foo.exe -lalleg

   The dynamically linked version of Allegro gets built by default but if
   you want to build the statically linked version of Allegro write the
   following on the command line:

   SET STATICLINK=1

   In the same manner we can also enter one of the following lines to
   build either the debug or the profiling version of the library:

   SET DEBUGMODE=1
   SET PROFILEMODE=1

   Then we can start to actually make and install the Allegro library.

   set MINGDIR=c:\mingw32
   make

   Once the build is finished you can recover some disk space by running
   "make compress", which uses the UPX program to compress the executable
   files and the optimized dll. Before running "make compress", you must set
   the environment variable UPX_BIN to point to upx.exe. You will have to
   do run "make compress" before "make install" if you want the compressed
   dll to be copied to the windows directory. To recover even more disk
   space, you can run "make clean" to get rid of all the temporary files and
   HTML format documentation.

   make install


=======================================
============ Using Allegro ============
=======================================

   All the Allegro functions, variables, and data structures are defined 
   in allegro.h. You should include this in your programs, and link with 
   either the optimised library liballeg.a, the debugging library 
   liballd.a, or the profiling library liballp.a. You should include the
   Allegro DLLs in any software you release to the public.

   When using a statically linked library, you must define the preprocessor 
   symbol ALLEGRO_STATICLINK before including any of the Allegro headers.

   Don't forget that you need to use the END_OF_MAIN() macro right after 
   your main() function. Happy coding!
