#
#  Rules for building the Allegro library with MacOS X. This file is included
#  by the primary makefile, and should not be used directly.
#
#  The "depend" and "install" targets use sed.
#
#  See makefile.all for a list of the available targets.



# -------- define some variables that the primary makefile will use --------

PLATFORM = MacOS X
CC = gcc
OBJ_DIR = obj/macosx/$(VERSION)
EXE = 
OBJ = .o
HTML = html

PLATFORM_DIR = obj/macosx

UNIX_TOOLS = 1

RM_OPTS = -f


# -------- local variables --------

INSTALL_DIR = /usr/local

FRAMEWORK_DIR = /Library/Frameworks
FRAMEWORK_NAME = Allegro
FRAMEWORK = $(FRAMEWORK_DIR)/$(FRAMEWORK_NAME).framework

TEMPLATE_DIR = /Developer/ProjectBuilder\ Extras/Project\ Templates/Application
ifeq ($(wildcard $(TEMPLATE_DIR)),)
	TEMPLATE_DIR = /Library/Application\ Support/Apple/Developer\ Tools/Project\ Templates/Application
endif
TEMPLATE_NAME = Allegro\ Application
TEMPLATE = $(TEMPLATE_DIR)/$(TEMPLATE_NAME)

MAN_DIR = /usr/local/man


ifdef STATICLINK

# -------- link as a static library --------
LIB_NAME = lib/macosx/lib$(VERSION).a

else

# -------- link as a shared library --------
LIB_NAME = lib/macosx/lib$(VERSION)-$(shared_version).dylib

DYLINK_FLAGS = -flat_namespace -Wl,-U,__mangled_main_address
DYLINK_FLAGS += -dylib_compatibility_version=4.0.0 -dylib_current_version=$(shared_version)

INSTALL_NAME = -install_name lib$(VERSION)-$(shared_version).dylib
INSTALL_NAME_EMBED = -install_name "`echo "@executable_path/../Frameworks/$(FRAMEWORK_NAME).framework/Versions/$(shared_version)/$(FRAMEWORK_NAME)" | sed 's!//*!/!g'`"

ifdef EMBED
FRAMEWORK_DESCRIPTION = "embeddable"
else
FRAMEWORK_DESCRIPTION = "system wide"
endif

endif # STATICLINK



# -------- give a sensible default target for make without any args --------

.PHONY: _default

_default: default



# -------- decide what compiler options to use --------

ifdef WARNMODE
   WFLAGS = -Wall -W -Werror -Wno-unused -Wno-long-double
else
   WFLAGS = -Wall -Wno-unused -Wno-long-double
endif

ifdef TARGET_ARCH_COMPAT
   TARGET_ARCH = -mcpu=$(TARGET_ARCH_COMPAT)
else
   ifdef TARGET_ARCH_EXCL
      TARGET_ARCH = -march=$(TARGET_ARCH_EXCL)
   endif
endif

ifndef TARGET_OPTS
   TARGET_OPTS = -O2 -funroll-loops -ffast-math
endif

OFLAGS = $(TARGET_ARCH) $(TARGET_OPTS)



ifdef DEBUGMODE

# -------- debugging build --------
CFLAGS = -DDEBUGMODE=$(DEBUGMODE) $(WFLAGS) -g
SFLAGS = -DDEBUGMODE=$(DEBUGMODE) $(WFLAGS)
LFLAGS = -g

else
ifdef PROFILEMODE

# -------- profiling build --------
CFLAGS = $(WFLAGS) $(OFLAGS) -pg
SFLAGS = $(WFLAGS)
LFLAGS = -pg

else

# -------- optimised build --------
CFLAGS = $(WFLAGS) $(OFLAGS) -fomit-frame-pointer
SFLAGS = $(WFLAGS)

ifndef SYMBOLMODE
LFLAGS = -s
else
LFLAGS = 
endif

endif
endif

CFLAGS += -fno-common -pipe


# -------- list platform specific objects and programs --------

VPATH = src/macosx src/unix src/misc src/c tools/macosx
CFLAGS += -DALLEGRO_USE_C

OBJECT_LIST = $(COMMON_OBJECTS) $(C_OBJECTS) $(basename $(notdir $(ALLEGRO_SRC_MACOSX_FILES)))

STATIC_LIBRARIES = -framework Cocoa -framework Carbon -framework IOKit -framework System -framework AudioToolbox -framework QuickTime
ifdef STATICLINK
LIBRARIES = $(STATIC_LIBRARIES)
else
LIBRARIES = -framework Cocoa
endif

PROGRAMS = fixbundle

fixbundle: tools/macosx/fixbundle

DISTCLEAN_FILES += tools/macosx/fixbundle


# -------- rules for installing and removing the library files --------


create_install_dirs:
ifeq ($(wildcard $(INSTALL_DIR)/lib),)
	mkdir -p $(INSTALL_DIR)/lib
endif
ifeq ($(wildcard $(INSTALL_DIR)/include),)
	mkdir -p $(INSTALL_DIR)/include
endif
ifeq ($(wildcard $(INSTALL_DIR)/bin),)
	mkdir -p $(INSTALL_DIR)/bin
endif


ifdef STATICLINK

$(INSTALL_DIR)/lib/lib$(VERSION).a: $(LIB_NAME)
	cp $(LIB_NAME) $(INSTALL_DIR)/lib

else

$(INSTALL_DIR)/lib/lib$(VERSION)-$(shared_version).dylib: $(LIB_NAME)
	cp $(LIB_NAME) $(INSTALL_DIR)/lib

endif


$(INSTALL_DIR)/include/%: include/%
	cp $< $@

$(INSTALL_DIR)/include/allegro/%.h: include/allegro/%.h $(INSTALL_DIR)/include/allegro
	cp $< $@

$(INSTALL_DIR)/include/allegro:
	mkdir $(INSTALL_DIR)/include/allegro

$(INSTALL_DIR)/include/allegro/internal/%.h: include/allegro/internal/%.h $(INSTALL_DIR)/include/allegro/internal
	cp $< $@

$(INSTALL_DIR)/include/allegro/internal:
	mkdir $(INSTALL_DIR)/include/allegro/internal

$(INSTALL_DIR)/include/allegro/inline/%.inl: include/allegro/inline/%.inl $(INSTALL_DIR)/include/allegro/inline
	cp $< $@

$(INSTALL_DIR)/include/allegro/inline:
	mkdir $(INSTALL_DIR)/include/allegro/inline

$(INSTALL_DIR)/include/allegro/platform/%.h: include/allegro/platform/%.h $(INSTALL_DIR)/include/allegro/platform
	cp $< $@

$(INSTALL_DIR)/include/allegro/platform:
	mkdir $(INSTALL_DIR)/include/allegro/platform

$(INSTALL_DIR)/bin/allegro-config: $(LIB_NAME)
ifdef STATICLINK
	@sed -e "s/@LINK_WITH_STATIC_LIBS@/yes/" misc/allegro-config.in >temp
else
	@sed -e "s/@LINK_WITH_STATIC_LIBS@/no/" misc/allegro-config.in >temp
endif
	@sed -e "s/@prefix@/\/usr\/local/" temp > temp2
	@sed -e "s/@LIB_TO_LINK@/$(VERSION)/" temp2 > temp
	@sed -e "s/@LDFLAGS@//" temp > temp2
	@sed -e "s/@LIBS@/$(STATIC_LIBRARIES)/" temp2 > temp
	@sed -e "s/@INCLUDE_PREFIX@/\/usr\/local/" temp >temp2
	@sed -e "s/-l\$${lib_type}_unsharable/$(LIBRARIES)/" temp2 >$(INSTALL_DIR)/bin/allegro-config
	@rm -f temp temp2
	@chmod a+x $(INSTALL_DIR)/bin/allegro-config
	@echo allegro-config script created in $(INSTALL_DIR)/bin

HEADERS = $(addprefix $(INSTALL_DIR)/include/,$(subst include/,,$(wildcard include/allegro/*.h)))          \
          $(addprefix $(INSTALL_DIR)/include/,$(subst include/,,$(wildcard include/allegro/internal/*.h))) \
          $(addprefix $(INSTALL_DIR)/include/,$(subst include/,,$(wildcard include/allegro/inline/*.inl)))

INSTALL_FILES = create_install_dirs                                \
		$(INSTALL_DIR)/include/allegro.h                   \
		$(INSTALL_DIR)/include/allegro                     \
		$(INSTALL_DIR)/include/allegro/internal            \
		$(INSTALL_DIR)/include/allegro/inline              \
		$(INSTALL_DIR)/include/allegro/platform            \
		$(INSTALL_DIR)/include/osxalleg.h                  \
		$(INSTALL_DIR)/include/allegro/platform/aintosx.h  \
		$(INSTALL_DIR)/include/allegro/platform/aintunix.h \
		$(INSTALL_DIR)/include/allegro/platform/alosxcfg.h \
		$(INSTALL_DIR)/include/allegro/platform/alplatf.h  \
		$(INSTALL_DIR)/include/allegro/platform/alosx.h    \
		$(HEADERS)                                         \
		$(INSTALL_DIR)/bin/allegro-config

ifdef STATICLINK
	INSTALL_FILES += $(INSTALL_DIR)/lib/lib$(VERSION).a 
else
	INSTALL_FILES += $(INSTALL_DIR)/lib/lib$(VERSION)-$(shared_version).dylib
endif



install: $(INSTALL_FILES)
	@echo The $(DESCRIPTION) $(PLATFORM) library has been installed.
	@echo Run make install-man if you wish to install the man pages.
	@echo Run make install-framework if you wish to install the library as a framework.
	@echo Run make install-template if you wish to install the Project Builder application template.

UNINSTALL_FILES = $(INSTALL_DIR)/lib/liballeg.a               \
		  $(INSTALL_DIR)/lib/liballd.a                \
		  $(INSTALL_DIR)/lib/liballp.a                \
		  $(INSTALL_DIR)/lib/liballeg-$(shared_version).dylib \
		  $(INSTALL_DIR)/lib/liballd-$(shared_version).dylib \
		  $(INSTALL_DIR)/lib/liballp-$(shared_version).dylib \
		  $(INSTALL_DIR)/include/allegro.h            \
		  $(INSTALL_DIR)/include/osxalleg.h           \
		  $(INSTALL_DIR)/include/allegro/*.h          \
		  $(INSTALL_DIR)/include/allegro/internal/*.h \
		  $(INSTALL_DIR)/include/allegro/inline/*.inl \
		  $(INSTALL_DIR)/include/allegro/platform/*.h \
		  $(INSTALL_DIR)/bin/allegro-config

uninstall:
	-rm -f $(UNINSTALL_FILES)
	-rmdir $(INSTALL_DIR)/include/allegro/platform
	-rmdir $(INSTALL_DIR)/include/allegro/inline
	-rmdir $(INSTALL_DIR)/include/allegro/internal
	-rmdir $(INSTALL_DIR)/include/allegro
	-rm -fr $(FRAMEWORK)
	-rm -fr $(TEMPLATE)
	-sed -n -e "s,^@[@\\].*@\([a-zA-Z0-9_]*\)[^a-zA-Z0-9_*].*,$(MAN_DIR)/man3/\1.3,p" docs/src/allegro._tx \
	  | xargs -n 1 rm -f
	-sed -n -e "s,^@@Example.*@\(ex.*\),$(MAN_DIR)/man3/\1.3,p" docs/src/allegro._tx \
	  | xargs -n 1 rm -f
	-sed -n -e "s,^@@\(struct\|typedef\).*@\([a-zA-Z0-9_]*\),$(MAN_DIR)/man3/\2.3,p" docs/src/allegro._tx \
	  | xargs -n 1 rm -f
	@echo All gone!	

install-framework: $(LIB_NAME)
ifdef STATICKLINK
	@echo You need to compile Allegro as a dynamic library to install the framework.
else
	@rm -fr $(FRAMEWORK)
	@mkdir $(FRAMEWORK)
	@mkdir -p $(FRAMEWORK)/Versions/$(shared_version)/Headers
	@mkdir -p $(FRAMEWORK)/Versions/$(shared_version)/Resources
ifdef EMBED
	$(CC) -dynamiclib $(DYLINK_FLAGS) $(INSTALL_NAME_EMBED) $(PFLAGS) -o $(FRAMEWORK)/Versions/$(shared_version)/$(FRAMEWORK_NAME) $(OBJECTS) $(STATIC_LIBRARIES)
else
	@cp $(LIB_NAME) $(FRAMEWORK)/Versions/$(shared_version)/$(FRAMEWORK_NAME)
endif
	@cp include/allegro.h $(FRAMEWORK)/Versions/$(shared_version)/Headers
	@cp include/osxalleg.h $(FRAMEWORK)/Versions/$(shared_version)/Headers
	@cp -r include/allegro $(FRAMEWORK)/Versions/$(shared_version)/Headers
	@(cd $(FRAMEWORK)/Versions; ln -s $(shared_version) Current)
	@(cd $(FRAMEWORK); ln -s Versions/Current/Headers $(FRAMEWORK)/Headers)
	@(cd $(FRAMEWORK); ln -s Versions/Current/Resources $(FRAMEWORK)/Resources)
	@(cd $(FRAMEWORK); ln -s Versions/Current/$(FRAMEWORK_NAME) $(FRAMEWORK)/$(FRAMEWORK_NAME))
	@sed -e "s/@NAME@/$(FRAMEWORK_NAME)/" misc/Info.plist >temp
	@sed -e "s/@VERSION@/$(shared_version) ($(DESCRIPTION))/" temp >$(FRAMEWORK)/Resources/Info.plist
	@rm -f temp
	@echo The $(FRAMEWORK_DESCRIPTION) Allegro framework has been successfully installed in:
	@echo $(FRAMEWORK)
endif

install-template: install-framework
	@rm -fr $(TEMPLATE)
	@mkdir -p $(TEMPLATE)/AllegroApp.pbproj
	@cp misc/template.c $(TEMPLATE)/main.c
	@cp misc/TemplateInfo.plist $(TEMPLATE)/AllegroApp.pbproj
	@cp misc/project.pbxproj $(TEMPLATE)/AllegroApp.pbproj
	@cp misc/project.pbxuser $(TEMPLATE)/AllegroApp.pbproj
	@echo Allegro application template for Project Builder installed in:
	@echo $(TEMPLATE)


docs/man/install_allegro.3: docs/src/allegro._tx $(MAKEDOC)
	$(MAKEDOC) -man docs/man/dummyname.3 $<

install-man: docs docs/man/install_allegro.3
	@mkdir -p $(MAN_DIR)/man3
	@for file in docs/man/*.3; do \
	  echo Installing $$file to $(MAN_DIR)/man3; \
	  cp $$file $(MAN_DIR)/man3/; \
	done



# -------- test capabilities --------

TEST_CPP = $(CC) -fno-exceptions -c src/misc/test.cpp -o $(PLATFORM_DIR)/test.o

include makefile.tst



# -------- finally, we get to the fun part... --------

ifdef STATICLINK

# -------- link as a static library --------
define MAKE_LIB
ar rs $(LIB_NAME) $(OBJECTS)
ranlib $(LIB_NAME)
endef

else

# -------- link as a shared library --------

define MAKE_LIB
$(CC) -dynamiclib $(DYLINK_FLAGS) $(INSTALL_NAME) $(PFLAGS) -o $(LIB_NAME) $(OBJECTS) $(STATIC_LIBRARIES)
endef

endif # STATICLINK

COMPILE_FLAGS = $(subst src/,-DALLEGRO_SRC ,$(findstring src/, $<))$(CFLAGS)

$(OBJ_DIR)/%.o: %.c
	$(CC) $(COMPILE_FLAGS) -I. -I./include -o $@ -c $<

$(OBJ_DIR)/%.o: %.cpp
	$(CC) -fno-exceptions $(COMPILE_FLAGS) -I. -I./include -o $@ -c $<

$(OBJ_DIR)/%.o: %.m
	$(CC) $(COMPILE_FLAGS) -I. -I./include -o $@ -c $<

*/%: $(OBJ_DIR)/%.o $(LIB_NAME)
	$(CC) $(LFLAGS) -o $@ $< $(LIB_NAME) $(LIBRARIES)

define LINK_WITHOUT_LIB
   $(CC) $(LFLAGS) -o $@ $^
endef

PLUGIN_LIB = lib/macosx/lib$(VERY_SHORT_VERSION)dat.a
PLUGINS_H = obj/macosx/plugins.h
PLUGIN_DEPS = $(LIB_NAME) $(PLUGIN_LIB)
PLUGIN_SCR = scr

define GENERATE_PLUGINS_H
   cat tools/plugins/*.inc > obj/macosx/plugins.h
endef

define MAKE_PLUGIN_LIB
   ar rs $(PLUGIN_LIB) $(PLUGIN_OBJS)
endef

define LINK_WITH_PLUGINS
   $(CC) $(LFLAGS) -o $@ $< $(strip $(PLUGIN_LIB) $(addprefix `cat < ,$(addsuffix `,$(PLUGIN_SCRIPTS))) $(LIB_NAME) $(LIBRARIES))
endef


tools/macosx/%: $(OBJ_DIR)/%.o $(LIB_NAME)
ifdef STATICLINK
	$(CC) $(LFLAGS) -o $@ $< $(LIB_NAME) $(LIBRARIES)
else
	$(CC) $(LFLAGS) -o $@ $< $(LIB_NAME) $(LIBRARIES) -framework Carbon
endif



# -------- demo program iconification --------

.PHONY: fixdemo

fixdemo: demo/demo demo/demo.dat tools/macosx/fixbundle
	tools/macosx/fixbundle demo/demo -d demo/demo.dat GAME_PAL SHIP3




# -------- generate automatic dependencies --------

DEPEND_PARAMS = -MM -MG -I. -I./include -DSCAN_DEPEND -DALLEGRO_MACOSX

depend:
	$(CC) $(DEPEND_PARAMS) src/*.c src/macosx/*.m src/unix/*.c src/misc/*.c demo/*.c > _depend.tmp
	$(CC) $(DEPEND_PARAMS) docs/src/makedoc/*.c examples/*.c setup/*.c tests/*.c* >> _depend.tmp
	$(CC) $(DEPEND_PARAMS) tools/*.c tools/plugins/*.c tools/macosx/*.c >> _depend.tmp
	sed -e "s/^[a-zA-Z0-9_\/]*\///" _depend.tmp > _depend2.tmp
	sed -e "s/^\([a-zA-Z0-9_]*\.o *:\)/obj\/macosx\/alleg\/\1/" _depend2.tmp > obj/macosx/alleg/makefile.dep
	sed -e "s/^\([a-zA-Z0-9_]*\.o *:\)/obj\/macosx\/alld\/\1/" _depend2.tmp > obj/macosx/alld/makefile.dep
	sed -e "s/^\([a-zA-Z0-9_]*\.o *:\)/obj\/macosx\/allp\/\1/" _depend2.tmp > obj/macosx/allp/makefile.dep
	rm _depend.tmp _depend2.tmp
