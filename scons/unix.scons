Import('sourceFiles')

import os
import checks

env, files = SConscript('all.scons', exports = 'sourceFiles')

def OnX86():
    uname = os.uname()
    import re
    return re.match(r'i\d86', uname[ 4 ])

def EnableVBEAF():
    if OnX86() and getOption('vbeaf', 'no'):
        return 1
    return 0

def EnableVGA():
    if OnX86() and getOption('vga', 'no'):
        return 1
    return 0

tests = {}
tests[ 'CheckAMD64' ] = checks.CheckAMD64
tests[ 'CheckIntel' ] = checks.CheckIntel
tests[ 'CheckSparc' ] = checks.CheckSparc
tests[ 'CheckProcFS' ] = checks.CheckProcFS
tests[ 'CheckProcFSArgCV' ] = checks.CheckProcFSArgCV
tests[ 'CheckASMUnderscores' ] = checks.CheckASMUnderscores
tests[ 'CheckMMX' ] = checks.CheckMMX
tests[ 'CheckSSE' ] = checks.CheckSSE
tests[ 'AlsaVersion' ] = checks.AlsaVersion
tests[ 'CheckBigEndian' ] = checks.CheckBigEndian
tests[ 'CheckLittleEndian' ] = checks.CheckLittleEndian
tests[ 'CheckDarwin' ] = checks.CheckDarwin
tests[ 'CheckLinux' ] = checks.CheckLinux
tests[ 'CheckFBCon' ] = checks.CheckFBCon
tests[ 'CheckSVGALibVersion' ] = checks.CheckSVGALibVersion
tests[ 'CheckConstructor' ] = checks.CheckConstructor
tests[ 'CheckALSADigi' ] = checks.CheckALSADigi
tests[ 'CheckALSAMidi' ] = checks.CheckALSAMidi
tests[ 'CheckARTSDigi' ] = checks.CheckARTSDigi
tests[ 'CheckXCursor' ] = checks.CheckXCursor
tests[ 'CheckMapFailed' ] = checks.CheckMapFailed
tests[ 'CheckESDDigi' ] = checks.CheckESDDigi
tests[ 'CheckJackDigi' ] = checks.CheckJackDigi
tests[ 'CheckForX' ] = checks.CheckForX
tests[ 'CheckOSSDigi' ] = checks.CheckOSSDigi
tests[ 'CheckOSSMidi' ] = checks.CheckOSSMidi

config = env.Configure(custom_tests = tests)

if config.CheckIntel():
	config.env.Append( CCFLAGS = [ '-mtune=pentium' ] )

if config.CheckAMD64():
	config.env.Append( CCFLAGS = [ '-mtune=athlon' ] )

def getOption(name, default):
    if ARGUMENTS.get(name, default) == 'yes':
        return 1
    return 0

## The platform variable will hold all configuration things we care about
## so that alunixac.h can be written
platform = {}

config.CheckLib('m', 'sin')
platform[ 'ALLEGRO_ALSA_VERSION' ] = [ config.AlsaVersion(), 'Define to the installed ALSA version' ]
platform[ 'ALLEGRO_ASM_PREFIX' ] = [ config.CheckASMUnderscores(), 'Define if compiler prepends underscore to symbols.' ]
platform[ 'ALLEGRO_BIG_ENDIAN' ] = [ config.CheckBigEndian(), 'Define if target machine is big endian.' ]
platform[ 'ALLEGRO_COLOR16' ] = [ getOption('color16', 'yes'), 'Define if you want support for 16 bpp modes.' ]
platform[ 'ALLEGRO_COLOR24' ] = [ getOption('color24', 'yes'), 'Define if you want support for 24 bpp modes.' ]
platform[ 'ALLEGRO_COLOR32' ] = [ getOption('color32', 'yes'), 'Define if you want support for 32 bpp modes.' ]
platform[ 'ALLEGRO_COLOR8' ] = [ getOption('color8', 'yes'), 'Define if you want support for 8 bpp modes.' ]
platform[ 'ALLEGRO_DARWIN' ] = [ config.CheckDarwin(), 'Define if target platform is Darwin.' ]
platform[ 'ALLEGRO_HAVE_GETEXECNAME' ] = [ config.CheckFunc('getexecname'), 'Define to 1 if you have getexecname' ]
platform[ 'ALLEGRO_HAVE_PROCFS_ARGCV' ] = [ config.CheckProcFSArgCV(), 'Define to 1 if procfs reveals argc and argv' ]
platform[ 'ALLEGRO_LINUX' ] = [ config.CheckLinux(), 'Define if target platform is linux.' ]
platform[ 'ALLEGRO_LINUX_FBCON' ] = [ config.CheckFBCon(), 'Define to enable Linux console fbcon driver.' ]
platform[ 'ALLEGRO_LINUX_SVGALIB' ] = [ config.CheckLib("vga", "vga_init"), 'Define to enable Linux console SVGAlib driver.' ]
platform[ 'ALLEGRO_LINUX_SVGALIB_HAVE_VGA_VERSION' ] = [ config.CheckSVGALibVersion(), 'Define if SVGAlib driver can check vga_version.' ]
platform[ 'ALLEGRO_LINUX_VBEAF' ] = [ EnableVBEAF(), 'Define to enable Linux console VBE/AF driver.' ]
platform[ 'ALLEGRO_LINUX_VGA' ] = [ EnableVGA(), 'Define to enable Linux console VGA driver.' ]
platform[ 'ALLEGRO_LITTLE_ENDIAN' ] = [ config.CheckLittleEndian(), 'Define if target machine is little endian.' ]
platform[ 'ALLEGRO_MMX' ] = [ config.CheckMMX(), 'Define if assembler supports MMX.' ]
platform[ 'ALLEGRO_NO_ASM' ] = [ getOption('no_asm', 'yes'), 'Define for Unix platforms, to use C convention for bank switching.' ]
platform[ 'ALLEGRO_SSE' ] = [ config.CheckSSE(), 'Define if assembler supports SSE.' ]
platform[ 'ALLEGRO_USE_CONSTRUCTOR' ] = [ config.CheckConstructor(), 'Define if constructor attribute is supported.' ]
platform[ 'ALLEGRO_USE_SCHED_YIELD' ] = [ config.CheckLib(['c', 'posix4', 'rt'], 'sched_yield'), 'Define if sched_yield is provided by some library.' ]
platform[ 'ALLEGRO_USE_XIM' ] = [ config.CheckLib('X11', 'XOpenIM'), 'Define if XIM extension is supported.' ]
platform[ 'ALLEGRO_WITH_ALSADIGI' ] = [ config.CheckALSADigi(), 'Define if ALSA DIGI driver is supported.' ]
platform[ 'ALLEGRO_WITH_ALSAMIDI' ] = [ config.CheckALSAMidi(), 'Define if ALSA MIDI driver is supported.' ]
platform[ 'ALLEGRO_WITH_ARTSDIGI' ] = [ config.CheckARTSDigi(), 'Define if aRts DIGI driver is supported.' ]
platform[ 'ALLEGRO_WITH_ESDDIGI' ] = [ config.CheckESDDigi(), 'Define if ESD DIGI driver is supported.' ]
platform[ 'ALLEGRO_WITH_JACKDIGI' ] = [ config.CheckJackDigi(), 'Define if JACK DIGI driver is supported.' ]
platform[ 'ALLEGRO_WITH_MAGIC_MAIN' ] = [ getOption('magic_main', 'no'), 'Define if you need to use a magic main.' ]

useXWindows = config.CheckForX()

platform[ 'ALLEGRO_WITH_XWINDOWS' ] = [ useXWindows, 'Define if you need support for X-Windows.' ]
platform[ 'ALLEGRO_XWINDOWS_WITH_SHM' ] = [ config.CheckLib('Xext', 'XShmQueryExtension'), 'Define if MIT-SHM extension is supported.' ]
platform[ 'ALLEGRO_XWINDOWS_WITH_XCURSOR' ] = [ config.CheckXCursor(), 'Define if XCursor ARGB extension is available.' ]
platform[ 'ALLEGRO_XWINDOWS_WITH_XF86DGA2' ] = [ config.CheckLib('Xxf86dga', 'XDGAQueryExtension'), 'Define if DGA version 2.0 or newer is supported' ]
platform[ 'ALLEGRO_XWINDOWS_WITH_XF86VIDMODE' ] = [ config.CheckLib('Xxf86vm', 'XF86VidModeQueryExtension'), 'Define if XF86VidMode extension is supported.' ]
platform[ 'ALLEGRO_XWINDOWS_WITH_XPM' ] = [ config.CheckLib('Xpm', 'XpmCreatePixmapFromData'), 'Define if xpm bitmap support is available.' ]
platform[ 'HAVE_DIRENT_H' ] = [ config.CheckCHeader('dirent.h'), 'Define to 1 if you have the <dirent.h> header file, and it defines `DIR\'. ' ]
platform[ 'HAVE_DLFCN_H' ] = [ config.CheckCHeader('dlfcn.h'), 'Define to 1 if you have the <dlfcn.h> header file.' ]
platform[ 'HAVE_FCNTL_H' ] = [ config.CheckCHeader('fcntl.h'), 'Define to 1 if you have the <fcntl.h> header file.' ]
platform[ 'HAVE_INTTYPES_H' ] = [ config.CheckCHeader('inttypes.h'), 'Define to 1 if you have the <inttypes.h> header file.' ]
platform[ 'HAVE_LIBOSSAUDIO' ] = [ config.CheckLib('ossaudio', '_oss_ioctl'), 'Define to 1 if you have the `ossaudio\' library (-lossaudio).' ]
platform[ 'HAVE_LIBPTHREAD' ] = [ config.CheckLib('pthread', 'pthread_create'), 'Define if you have the pthread library.' ]
platform[ 'HAVE_LIMITS_H' ] = [ config.CheckCHeader('limits.h'), 'Define to 1 if you have the <limits.h> header file.' ]
platform[ 'HAVE_LINUX_AWE_VOICE_H' ] = [ config.CheckCHeader('linux/awe_voice.h'), 'Define to 1 if you have the <linux/awe_voice.h> header file.' ]
platform[ 'HAVE_LINUX_INPUT_H' ] = [ config.CheckCHeader('linux/input.h'), 'Define to 1 if you have the <linux/input.h> header file.' ]
platform[ 'HAVE_LINUX_JOYSTICK_H' ] = [ config.CheckCHeader('linux/joystick.h'), 'Define to 1 if you have the <linux/joystick.h> header file.' ]
platform[ 'HAVE_LINUX_SOUNDCARD_H' ] = [ config.CheckCHeader('linux/soundcard.h'), 'Define to 1 if you have the <linux/soundcard.h> header file.' ]
platform[ 'HAVE_MACHINE_SOUNDCARD_H' ] = [ config.CheckCHeader('machine/soundcard.h'), 'Define to 1 if you have the <machine/soundcard.h> header file.' ]
platform[ 'HAVE_MEMCMP' ] = [ config.CheckLib('c', 'memcmp'), 'Define to 1 if you have the `memcmp\' function.' ]
platform[ 'HAVE_MEMORY_H' ] = [ config.CheckCHeader('memory.h'), 'Define to 1 if you have the <memory.h> header file.' ]
platform[ 'HAVE_MKSTEMP' ] = [ config.CheckLib('c', 'mkstemp'), 'Define to 1 if you have the `mkstemp\' function.' ]
platform[ 'HAVE_MMAP' ] = [ config.CheckLib('c', 'mmap'), 'Define to 1 if you have the `mmap\' function.' ]
platform[ 'HAVE_NDIR_H' ] = [ config.CheckCHeader('ndir.h'), 'Define to 1 if you have the <ndir.h> header file, and it defines `DIR\'.' ]
platform[ 'HAVE_SOUNDCARD_H' ] = [ config.CheckCHeader('soundcard.h'), 'Define to 1 if you have the <soundcard.h> header file.' ]
platform[ 'HAVE_STDBOOL_H' ] = [ config.CheckCHeader('stdbool.h'), 'Define to 1 if stdbool.h conforms to C99.' ]
platform[ 'HAVE_STDINT_H' ] = [ config.CheckCHeader('stdint.h'), 'Define to 1 if you have the <stdint.h> header file.' ]
platform[ 'HAVE_STDLIB_H' ] = [ config.CheckCHeader('stdlib.h'), 'Define to 1 if you have the <stdlib.h> header file.' ]
platform[ 'HAVE_STRICMP' ] = [ config.CheckLib('c', 'stricmp'), 'Define to 1 if you have the `stricmp\' function.' ]
platform[ 'HAVE_STRINGS_H' ] = [ config.CheckCHeader('strings.h'), 'Define to 1 if you have the <strings.h> header file.' ]
platform[ 'HAVE_STRING_H' ] = [ config.CheckCHeader('string.h'), 'Define to 1 if you have the <string.h> header file.' ]
platform[ 'HAVE_STRLWR' ] = [ config.CheckLib('c', 'strlwr'), 'Define to 1 if you have the `strlwr\' function.' ]
platform[ 'HAVE_STRUPR' ] = [ config.CheckLib('c', 'strup'), 'Define to 1 if you have the `strupr\' function.' ]
platform[ 'HAVE_SYS_DIR_H' ] = [ config.CheckCHeader('sys/dir.h'), 'Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR\'.' ]
platform[ 'HAVE_SYS_IO_H' ] = [ config.CheckCHeader('sys/io.h'), 'Define to 1 if you have the <sys/io.h> header file.' ]
platform[ 'HAVE_SYS_NDIR_H' ] = [ config.CheckCHeader('sys/ndir.h'), 'Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR\'.' ]
platform[ 'HAVE_SYS_SOUNDCARD_H' ] = [ config.CheckCHeader('sys/soundcard.h'), 'Define to 1 if you have the <sys/soundcard.h> header file.' ]
platform[ 'HAVE_SYS_STAT_H' ] = [ config.CheckCHeader('sys/stat.h'), 'Define to 1 if you have the <sys/stat.h> header file.' ]
platform[ 'HAVE_SYS_TIME_H' ] = [ config.CheckCHeader('sys/time.h'), 'Define to 1 if you have the <sys/time.h> header file.' ]
platform[ 'HAVE_SYS_TYPES_H' ] = [ config.CheckCHeader('sys/types.h'), 'Define to 1 if you have the <sys/types.h> header file.' ]
platform[ 'HAVE_SYS_UTSNAME_H' ] = [ config.CheckCHeader('sys/utsname.h'), 'Define to 1 if you have the <sys/utsname.h> header file.' ]
platform[ 'HAVE_UNISTD_H' ] = [ config.CheckCHeader('unistd.h'), 'Define to 1 if you have the <unistd.h> header file.' ]
platform[ 'HAVE_VPRINTF' ] = [ config.CheckLib('c', 'vprintf'), 'Define to 1 if you have the `vprintf\' function.' ]
platform[ 'HAVE__BOOL' ] = [ config.CheckCHeader('stdbool.h'), 'Define to 1 if the system has the type `_Bool\'.' ]
platform[ 'MAP_FAILED' ] = [ config.CheckMapFailed(), 'Define to (void *)-1, if MAP_FAILED is not defined.' ]
platform[ 'ALLEGRO_WITH_OSSDIGI' ] = [ config.CheckOSSDigi(), 'Define if OSS DIGI driver is supported.' ]
platform[ 'ALLEGRO_WITH_OSSMIDI' ] = [ config.CheckOSSMidi(), 'Define if OSS MIDI driver is supported.' ]

## Not checked yet
platform[ 'PACKAGE_BUGREPORT' ] = [ '""', 'Define to the address where bug reports for this package should be sent.' ]
platform[ 'ALLEGRO_WITH_MODULES' ] = [ '1', 'Define if dynamically loaded modules are supported.' ]
platform[ 'PACKAGE_NAME' ] = [ '""', 'Define to the full name of this package.' ]
platform[ 'PACKAGE_STRING' ] = [ '""', 'Define to the full name and version of this package.' ]
platform[ 'PACKAGE_TARNAME' ] = [ '""', 'Define to the one symbol short name of this package.' ]
platform[ 'PACKAGE_VERSION' ] = [ '""', 'Define to the version of this package.' ]
platform[ 'RETSIGTYPE' ] = [ 'void', 'Define as the return type of signal handlers (`int\' or `void\').' ]
platform[ 'STDC_HEADERS' ] = [ '1', 'Define to 1 if you have the ANSI C header files.' ]
platform[ 'TIME_WITH_SYS_TIME' ] = [ '1', 'Define to 1 if you can safely include both <sys/time.h> and <time.h>.' ]
platform[ 'TM_IN_SYS_TIME' ] = [ False, 'Define to 1 if your <sys/time.h> declares `struct tm\'.' ]
platform[ 'ALLEGRO_WITH_SGIALDIGI' ] = [ False, 'Define if SGI AL DIGI driver is supported.' ]
platform[ 'WORDS_BIGENDIAN' ] = [ False, 'Define to 1 if your processor stores words with the most significant\n byte first (like Motorola and SPARC, unlike Intel and VAX).' ]
platform[ 'const' ] = [ False, 'Define to empty if `const\' does not conform to ANSI C.' ]

platform[ 'ALLEGRO_HAVE_SV_PROCFS' ] = [ False, 'Define to 1 if you have a System V sys/procfs.h' ]

env = config.Finish()
# print "Final env cpppath = " + str(env[ 'CPPPATH' ])

flags = [ '-g', '-Wall', '-Wno-unused', '-O2', '-funroll-loops', '-ffast-math', '-fomit-frame-pointer' ]
includes = [ "include", "include/allegro" ]
# includes = []
defines = [ "-DHAVE_CONFIG_H", "-DALLEGRO_SHARED", "-DALLEGRO_USE_C", "-DALLEGRO_LIB_BUILD" ]

env.Append(CCFLAGS = flags)
env.Append(CCFLAGS = defines)
env.Append(CPPPATH = includes)

def writeAutoHeader(filename, platform):
    def defined(name, use):
        if use:
            return "#define " + name + " " + str(use) + "\n"
        else:
            return "/* #undef " + name + " */\n"
    file = open(filename, "w")
    file.write("/* Generated by scons build system. Don't touch */\n")
    for name in platform.keys():
        use, description = platform[ name ]
        file.write("/* " + description + " */\n")
        file.write(defined(name, use))
        file.write("\n")
    file.close()

## Write
writeAutoHeader("include/allegro/platform/alunixac.h", platform)

files += sourceFiles('unix', Split("""
alsa5.c
alsa9.c
alsamidi.c
arts.c
jack.c
sgial.c
udjgpp.c
udrvlist.c
udummy.c
uesd.c
ufdwatch.c
ufile.c
ugfxdrv.c
ujoydrv.c
ukeybd.c
umain.c
umodules.c
umouse.c
uoss.c
uossmidi.c
usnddrv.c
usystem.c
uthreads.c
utime.c
utimernu.c
uxthread.c
"""));

## `useXWindows' is set above by CheckForX()
if useXWindows:
    files += sourceFiles('x/', Split("""
    xgfxdrv.c
    xkeyboard.c
    xmouse.c
    xsystem.c
    xvtable.c
    xwin.c
    """));

def pruneLibs(libs):
    return list(set(libs))

env.Replace(LIBS = pruneLibs(env[ 'LIBS' ]))

Return('env', 'files')
